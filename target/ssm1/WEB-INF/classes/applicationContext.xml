<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd">
	<!-- 自动扫描目录,注解必须  忽略掉@controller 注解的类以免2次扫描造成事务失效-->
	<context:component-scan base-package="com.finance">
	<context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"></context:exclude-filter>
	</context:component-scan>
	<aop:aspectj-autoproxy />
	<aop:config proxy-target-class="true" />

	<!-- 配置数据源 bean 使用druid连接池咯 druid数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="username" value="root"></property>
		<property name="password" value="root"></property>
		<property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
		<property name="url"
			value="jdbc:mysql://localhost:3306/pm?characterEncoding=utf8&amp;useUnicode=true"></property>
		<!-- amp转义&才可以多参数设置 -->
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="1" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />

		<!-- 连接池最小空闲 -->
        <property name="minIdle" value="1" />
        <property name="maxWait" value="60000" /> 
		<!-- 用来检测有效sql -->
		<property name="validationQuery" value="SELECT 'x' FROM DUAL" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		  <!-- mysql 不支持 poolPreparedStatements-->  
        <!--<property name="poolPreparedStatements" value="true" />-->  
        <!--<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />-->  
		<!-- 打开removeAbandoned功能 -->
		<!-- <property name="removeAbandoned" value="true" /> -->
		<!-- 1800秒，也就是30分钟 -->
	<!-- 	<property name="removeAbandonedTimeout" value="1800" /> -->
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<!-- 监控数据库 -->
		<property name="filters" value="mergeStat" />
	</bean>
	<bean id="sqlsessionfactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:mybatis-config.xml"></property><!--这里有配置文件配置分页插件 -->
		<!-- <property name="plugins">
			<list>
				<bean
					class="com.github.miemiedev.mybatis.paginator.OffsetLimitInterceptor">
					<property name="dialectClass"
						value="com.github.miemiedev.mybatis.paginator.dialect.MySQLDialect"></property>
				</bean>
			</list>
		</property> 也可以这样配置分页插件 两者等同.-->
		<property name="mapperLocations">
			<list>
				<value>classpath:mappers/*.xml</value><!-- list里可写多条value路径 -->
			</list>
		</property>
	</bean>
	<!-- 组件扫描 ,mybatis接口注解,扫描包路径 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.finance.dao"></property>
	</bean>
	<!-- 持久化模板 -->
	<bean id="SqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlsessionfactory"></constructor-arg>
	</bean>
	<!-- 配置事务 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- 事务注解 方式声明事务 ,如果使用注解方式,则事务传播模式和切入点都可以省略咯,将使用注解来代替,同等意思.比如这里的事务管理器就是上边配置
	传播模式里的属性.注解会注解在service层里的方法,相当于切入点配置.可以同时配置.最好将注解式.注解时要使用@transactional注解,
	否则将提示not be manage by spring-->
	<tx:annotation-driven  transaction-manager="transactionManager"/>
	<!-- 配置事务传播模式 -->
	<!-- aop:切入点 -->
	 <aop:config proxy-target-class="true">
		<aop:pointcut expression="execution(* com.finance.service.impl.*.*(..))"
			id="pointCut" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pointCut" />
	</aop:config>  
	 <tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>  
	
	

</beans>
